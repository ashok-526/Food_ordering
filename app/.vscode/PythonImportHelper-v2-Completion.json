[
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "ExpressionWrapper",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "FloatField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "serve",
        "importPath": "django.views.static",
        "description": "django.views.static",
        "isExtraImport": true,
        "detail": "django.views.static",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "food",
        "description": "food",
        "isExtraImport": true,
        "detail": "food",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "food.migrations.0001_initial",
        "description": "food.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Cart',\n            fields=[\n                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),",
        "detail": "food.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "food.migrations.0002_cart_esewa_alter_pizza_image",
        "description": "food.migrations.0002_cart_esewa_alter_pizza_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('food', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='cart',\n            name='esewa',\n            field=models.CharField(default='', max_length=1000),\n            preserve_default=False,",
        "detail": "food.migrations.0002_cart_esewa_alter_pizza_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "food.migrations.0003_cartitem_quantity",
        "description": "food.migrations.0003_cartitem_quantity",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('food', '0002_cart_esewa_alter_pizza_image'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='cartitem',\n            name='quantity',\n            field=models.PositiveIntegerField(default=1),\n        ),",
        "detail": "food.migrations.0003_cartitem_quantity",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "food.migrations.0004_order_place",
        "description": "food.migrations.0004_order_place",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('food', '0003_cartitem_quantity'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Order_place',\n            fields=[\n                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),\n                ('created_at', models.DateField(auto_now_add=True)),",
        "detail": "food.migrations.0004_order_place",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "food.migrations.0005_rename_order_place_orderplace",
        "description": "food.migrations.0005_rename_order_place_orderplace",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('food', '0004_order_place'),\n    ]\n    operations = [\n        migrations.RenameModel(\n            old_name='Order_place',\n            new_name='orderplace',\n        ),\n    ]",
        "detail": "food.migrations.0005_rename_order_place_orderplace",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "food.migrations.0006_remove_orderplace_payment",
        "description": "food.migrations.0006_remove_orderplace_payment",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('food', '0005_rename_order_place_orderplace'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='orderplace',\n            name='Payment',\n        ),\n    ]",
        "detail": "food.migrations.0006_remove_orderplace_payment",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "food.migrations.0007_alter_pizza_image",
        "description": "food.migrations.0007_alter_pizza_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('food', '0006_remove_orderplace_payment'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='pizza',\n            name='image',\n            field=models.ImageField(upload_to='pizzas'),\n        ),",
        "detail": "food.migrations.0007_alter_pizza_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "food.migrations.0008_alter_pizza_image",
        "description": "food.migrations.0008_alter_pizza_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('food', '0007_alter_pizza_image'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='pizza',\n            name='image',\n            field=models.ImageField(upload_to='media'),\n        ),",
        "detail": "food.migrations.0008_alter_pizza_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "food.migrations.0009_alter_pizza_image",
        "description": "food.migrations.0009_alter_pizza_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('food', '0008_alter_pizza_image'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='pizza',\n            name='image',\n            field=models.ImageField(upload_to='pizzas/'),\n        ),",
        "detail": "food.migrations.0009_alter_pizza_image",
        "documentation": {}
    },
    {
        "label": "MemberAdmin",
        "kind": 6,
        "importPath": "food.admin",
        "description": "food.admin",
        "peekOfCode": "class MemberAdmin(admin.ModelAdmin):\n\tpass\nadmin.site.register(Categories, MemberAdmin)\nadmin.site.register(Pizza, MemberAdmin) \nadmin.site.register(Cart, MemberAdmin) \nadmin.site.register(CartItem, MemberAdmin)\nadmin.site.register(orderplace, MemberAdmin)  \n#<a href=\"{% url '' order.uid %}\" class=\"text-2xl text-right mx-44 btn btn-outline-primary\">Payment</a>",
        "detail": "food.admin",
        "documentation": {}
    },
    {
        "label": "FoodConfig",
        "kind": 6,
        "importPath": "food.apps",
        "description": "food.apps",
        "peekOfCode": "class FoodConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'food'\n    def ready(self):\n        from django.contrib.auth.models import User\n        def get_cart_count(self):\n            from .models import CartItem\n            return CartItem.objects.filter(cart_reference__is_paid=False, cart_reference__user=self).count()\n        User.add_to_class(\"get_cart_count\", get_cart_count)",
        "detail": "food.apps",
        "documentation": {}
    },
    {
        "label": "Basemodel",
        "kind": 6,
        "importPath": "food.models",
        "description": "food.models",
        "peekOfCode": "class Basemodel(models.Model):\n    uid = models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True)\n    created_at = models.DateField(auto_now_add=True)\n    updated_at = models.DateField(auto_now=True)  # Use auto_now instead of auto_now_add\n    class Meta:\n        abstract = True\nclass Categories(Basemodel):  \n    category_name = models.CharField(max_length=100)\nclass Pizza(Basemodel):  \n    category = models.ForeignKey(Categories, on_delete=models.CASCADE, related_name='food')",
        "detail": "food.models",
        "documentation": {}
    },
    {
        "label": "Categories",
        "kind": 6,
        "importPath": "food.models",
        "description": "food.models",
        "peekOfCode": "class Categories(Basemodel):  \n    category_name = models.CharField(max_length=100)\nclass Pizza(Basemodel):  \n    category = models.ForeignKey(Categories, on_delete=models.CASCADE, related_name='food')\n    pizza_name = models.CharField(max_length=50)\n    price = models.IntegerField()\n    image = models.ImageField(upload_to='pizzas/')  # Files will be stored in `media/pizzas/`\nclass Cart(Basemodel):  #\n    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='carts')\n    is_paid = models.BooleanField(default=False)",
        "detail": "food.models",
        "documentation": {}
    },
    {
        "label": "Pizza",
        "kind": 6,
        "importPath": "food.models",
        "description": "food.models",
        "peekOfCode": "class Pizza(Basemodel):  \n    category = models.ForeignKey(Categories, on_delete=models.CASCADE, related_name='food')\n    pizza_name = models.CharField(max_length=50)\n    price = models.IntegerField()\n    image = models.ImageField(upload_to='pizzas/')  # Files will be stored in `media/pizzas/`\nclass Cart(Basemodel):  #\n    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='carts')\n    is_paid = models.BooleanField(default=False)\n    esewa = models.CharField(max_length=1000)\n    def __str__(self):",
        "detail": "food.models",
        "documentation": {}
    },
    {
        "label": "Cart",
        "kind": 6,
        "importPath": "food.models",
        "description": "food.models",
        "peekOfCode": "class Cart(Basemodel):  #\n    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='carts')\n    is_paid = models.BooleanField(default=False)\n    esewa = models.CharField(max_length=1000)\n    def __str__(self):\n        if self.user:\n            return f\"Cart for {self.user.username}\"\n        return f\"Cart with no user\"\nclass CartItem(Basemodel):  \n    cart_reference = models.ForeignKey(Cart, on_delete=models.CASCADE, related_name='food_items')  ",
        "detail": "food.models",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "kind": 6,
        "importPath": "food.models",
        "description": "food.models",
        "peekOfCode": "class CartItem(Basemodel):  \n    cart_reference = models.ForeignKey(Cart, on_delete=models.CASCADE, related_name='food_items')  \n    pizza_reference = models.ForeignKey(Pizza, on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField(default=1)  # Add this field to represent the quantity\nclass orderplace(Basemodel):\n    name=models.CharField(max_length=40)\n    email= models.EmailField()\n    address = models.CharField(max_length=100)\n    contact = models.IntegerField()\n    note = models.TextField()",
        "detail": "food.models",
        "documentation": {}
    },
    {
        "label": "orderplace",
        "kind": 6,
        "importPath": "food.models",
        "description": "food.models",
        "peekOfCode": "class orderplace(Basemodel):\n    name=models.CharField(max_length=40)\n    email= models.EmailField()\n    address = models.CharField(max_length=100)\n    contact = models.IntegerField()\n    note = models.TextField()\n    def __str__(self):\n        return self.name",
        "detail": "food.models",
        "documentation": {}
    },
    {
        "label": "login_page",
        "kind": 2,
        "importPath": "food.views",
        "description": "food.views",
        "peekOfCode": "def login_page(request):\n    if request.method == 'POST':\n        username=request.POST.get('username')\n        password=request.POST.get('password')\n        if not User.objects.filter(username = username).exists():\n            messages.error(request, \"Invalid username!\")\n            return redirect('/login/')\n        user = authenticate(username =username , password = password)\n        if user is None:\n            messages.error(request, \"Invalid PASSWORD!\")",
        "detail": "food.views",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "food.views",
        "description": "food.views",
        "peekOfCode": "def register(request):\n    if request.method == 'POST':\n        first_name=request.POST.get('first_name')\n        last_name=request.POST.get('last_name')\n        username=request.POST.get('username')\n        password=request.POST.get('password')\n        user=User.objects.filter(username=username)\n        if user.exists():\n            messages.error(request, \"Username already exists!!\")\n            return redirect('/register')",
        "detail": "food.views",
        "documentation": {}
    },
    {
        "label": "order_home",
        "kind": 2,
        "importPath": "food.views",
        "description": "food.views",
        "peekOfCode": "def order_home(request):\n\tpizzas = Pizza.objects.all()\n\tcontext = {'pizzaa':pizzas}\n\treturn render(request , 'order.html',context)\ndef add_card(request , pizza_uid):\n\tuser = request.user ## to know who is user\n\tpizza_obj = Pizza.objects.get(uid = pizza_uid)\n\tcart , _ = Cart.objects.get_or_create(user = user , is_paid=False)\n  # Extract the actual Cart instance from the tuple\n\tcart_items = CartItem.objects.create(",
        "detail": "food.views",
        "documentation": {}
    },
    {
        "label": "add_card",
        "kind": 2,
        "importPath": "food.views",
        "description": "food.views",
        "peekOfCode": "def add_card(request , pizza_uid):\n\tuser = request.user ## to know who is user\n\tpizza_obj = Pizza.objects.get(uid = pizza_uid)\n\tcart , _ = Cart.objects.get_or_create(user = user , is_paid=False)\n  # Extract the actual Cart instance from the tuple\n\tcart_items = CartItem.objects.create(\n    cart_reference=cart,  # Use the extracted Cart instance\n    pizza_reference=pizza_obj\n)\n\treturn redirect(\"/\")",
        "detail": "food.views",
        "documentation": {}
    },
    {
        "label": "cart",
        "kind": 2,
        "importPath": "food.views",
        "description": "food.views",
        "peekOfCode": "def cart(request):\n    cart = Cart.objects.get(is_paid=False, user=request.user)\n    total_price = CartItem.objects.filter(cart_reference=cart).aggregate(Sum('pizza_reference__price'))['pizza_reference__price__sum']\n    context = {'carts': cart, 'total': total_price, 'order': cart}  # Include the 'order' object in the context\n    return render(request, 'cart.html', context)\ndef remove_item(request , remove_item):\n    try:\n        CartItem.objects.get(uid=remove_item).delete()\n    except Exception as e:\n        print(e)",
        "detail": "food.views",
        "documentation": {}
    },
    {
        "label": "remove_item",
        "kind": 2,
        "importPath": "food.views",
        "description": "food.views",
        "peekOfCode": "def remove_item(request , remove_item):\n    try:\n        CartItem.objects.get(uid=remove_item).delete()\n    except Exception as e:\n        print(e)\n    return redirect(\"/cart\")\nfrom django.db.models import Sum, F, ExpressionWrapper, FloatField\n@login_required(login_url=\"/login/\")\ndef dashboard(request):\n    dash_boards = Cart.objects.filter(is_paid=False, user=request.user)",
        "detail": "food.views",
        "documentation": {}
    },
    {
        "label": "dashboard",
        "kind": 2,
        "importPath": "food.views",
        "description": "food.views",
        "peekOfCode": "def dashboard(request):\n    dash_boards = Cart.objects.filter(is_paid=False, user=request.user)\n    for dashboard in dash_boards:\n        # Calculate the total price by summing the product of pizza price and quantity\n        total_price = dashboard.food_items.annotate(\n            item_total=ExpressionWrapper(F('pizza_reference__price') * F('quantity'), output_field=FloatField())\n        ).aggregate(total=Sum('item_total'))['total']\n        dashboard.total_price = total_price if total_price else 0  # Set to 0 if total_price is None\n    context = {'dash_boards': dash_boards}\n    return render(request, 'dashboard.html', context)",
        "detail": "food.views",
        "documentation": {}
    },
    {
        "label": "order_info",
        "kind": 2,
        "importPath": "food.views",
        "description": "food.views",
        "peekOfCode": "def order_info(request):\n    if request.method == 'POST':\n        name=request.POST.get('name')\n        email=request.POST.get('email')\n        address=request.POST.get('address')\n        contact=request.POST.get('contact')\n        note=request.POST.get('note')\n        order=orderplace.objects.create(\n            name=name,\n            email=email,",
        "detail": "food.views",
        "documentation": {}
    },
    {
        "label": "payment",
        "kind": 2,
        "importPath": "food.views",
        "description": "food.views",
        "peekOfCode": "def payment(request, *args, **kwargs):\n    # Get the cart and calculate total\n    cart = Cart.objects.get(is_paid=False, user=request.user)\n    total = CartItem.objects.filter(cart_reference=cart).aggregate(Sum('pizza_reference__price'))['pizza_reference__price__sum']\n    # Generate a UUID\n    uid = uuid.uuid4()\n    # Pass total and order to the template context\n    context = {'pay_total': total, 'uid': uid}\n    url = \"https://uat.esewa.com.np/epay/transrec\"\n    d = {",
        "detail": "food.views",
        "documentation": {}
    },
    {
        "label": "\tpizzas",
        "kind": 5,
        "importPath": "food.views",
        "description": "food.views",
        "peekOfCode": "\tpizzas = Pizza.objects.all()\n\tcontext = {'pizzaa':pizzas}\n\treturn render(request , 'order.html',context)\ndef add_card(request , pizza_uid):\n\tuser = request.user ## to know who is user\n\tpizza_obj = Pizza.objects.get(uid = pizza_uid)\n\tcart , _ = Cart.objects.get_or_create(user = user , is_paid=False)\n  # Extract the actual Cart instance from the tuple\n\tcart_items = CartItem.objects.create(\n    cart_reference=cart,  # Use the extracted Cart instance",
        "detail": "food.views",
        "documentation": {}
    },
    {
        "label": "\tcontext",
        "kind": 5,
        "importPath": "food.views",
        "description": "food.views",
        "peekOfCode": "\tcontext = {'pizzaa':pizzas}\n\treturn render(request , 'order.html',context)\ndef add_card(request , pizza_uid):\n\tuser = request.user ## to know who is user\n\tpizza_obj = Pizza.objects.get(uid = pizza_uid)\n\tcart , _ = Cart.objects.get_or_create(user = user , is_paid=False)\n  # Extract the actual Cart instance from the tuple\n\tcart_items = CartItem.objects.create(\n    cart_reference=cart,  # Use the extracted Cart instance\n    pizza_reference=pizza_obj",
        "detail": "food.views",
        "documentation": {}
    },
    {
        "label": "\tuser",
        "kind": 5,
        "importPath": "food.views",
        "description": "food.views",
        "peekOfCode": "\tuser = request.user ## to know who is user\n\tpizza_obj = Pizza.objects.get(uid = pizza_uid)\n\tcart , _ = Cart.objects.get_or_create(user = user , is_paid=False)\n  # Extract the actual Cart instance from the tuple\n\tcart_items = CartItem.objects.create(\n    cart_reference=cart,  # Use the extracted Cart instance\n    pizza_reference=pizza_obj\n)\n\treturn redirect(\"/\")\n@login_required(login_url=\"/login/\")",
        "detail": "food.views",
        "documentation": {}
    },
    {
        "label": "\tpizza_obj",
        "kind": 5,
        "importPath": "food.views",
        "description": "food.views",
        "peekOfCode": "\tpizza_obj = Pizza.objects.get(uid = pizza_uid)\n\tcart , _ = Cart.objects.get_or_create(user = user , is_paid=False)\n  # Extract the actual Cart instance from the tuple\n\tcart_items = CartItem.objects.create(\n    cart_reference=cart,  # Use the extracted Cart instance\n    pizza_reference=pizza_obj\n)\n\treturn redirect(\"/\")\n@login_required(login_url=\"/login/\")\ndef cart(request):",
        "detail": "food.views",
        "documentation": {}
    },
    {
        "label": "\tcart_items",
        "kind": 5,
        "importPath": "food.views",
        "description": "food.views",
        "peekOfCode": "\tcart_items = CartItem.objects.create(\n    cart_reference=cart,  # Use the extracted Cart instance\n    pizza_reference=pizza_obj\n)\n\treturn redirect(\"/\")\n@login_required(login_url=\"/login/\")\ndef cart(request):\n    cart = Cart.objects.get(is_paid=False, user=request.user)\n    total_price = CartItem.objects.filter(cart_reference=cart).aggregate(Sum('pizza_reference__price'))['pizza_reference__price__sum']\n    context = {'carts': cart, 'total': total_price, 'order': cart}  # Include the 'order' object in the context",
        "detail": "food.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "orderingapp.asgi",
        "description": "orderingapp.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "orderingapp.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "orderingapp.settings",
        "description": "orderingapp.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-k_+q+(zxfa)l6#kk%1-i0*jb6z3&m*is7l87_lewm!qwtt8m47'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = False\nALLOWED_HOSTS = ['.vercel.app','127.0.0.1','.now.sh']\nAUTH_USER_MODEL = 'auth.User'\n# Application definition",
        "detail": "orderingapp.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "orderingapp.settings",
        "description": "orderingapp.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-k_+q+(zxfa)l6#kk%1-i0*jb6z3&m*is7l87_lewm!qwtt8m47'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = False\nALLOWED_HOSTS = ['.vercel.app','127.0.0.1','.now.sh']\nAUTH_USER_MODEL = 'auth.User'\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "orderingapp.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "orderingapp.settings",
        "description": "orderingapp.settings",
        "peekOfCode": "DEBUG = False\nALLOWED_HOSTS = ['.vercel.app','127.0.0.1','.now.sh']\nAUTH_USER_MODEL = 'auth.User'\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "orderingapp.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "orderingapp.settings",
        "description": "orderingapp.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['.vercel.app','127.0.0.1','.now.sh']\nAUTH_USER_MODEL = 'auth.User'\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "orderingapp.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "orderingapp.settings",
        "description": "orderingapp.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'auth.User'\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'food',",
        "detail": "orderingapp.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "orderingapp.settings",
        "description": "orderingapp.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'food',\n]\nMIDDLEWARE = [",
        "detail": "orderingapp.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "orderingapp.settings",
        "description": "orderingapp.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'orderingapp.urls'",
        "detail": "orderingapp.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "orderingapp.settings",
        "description": "orderingapp.settings",
        "peekOfCode": "ROOT_URLCONF = 'orderingapp.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "orderingapp.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "orderingapp.settings",
        "description": "orderingapp.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "orderingapp.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "orderingapp.settings",
        "description": "orderingapp.settings",
        "peekOfCode": "WSGI_APPLICATION = 'orderingapp.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'railway',\n        'USER': 'postgres',\n        'PASSWORD': 'rBLJFBkkUohldRyQSNhAVLBNSrcXnzWX',\n        'HOST': 'junction.proxy.rlwy.net',",
        "detail": "orderingapp.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "orderingapp.settings",
        "description": "orderingapp.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'railway',\n        'USER': 'postgres',\n        'PASSWORD': 'rBLJFBkkUohldRyQSNhAVLBNSrcXnzWX',\n        'HOST': 'junction.proxy.rlwy.net',\n        'PORT': '35675',\n    }\n}",
        "detail": "orderingapp.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "orderingapp.settings",
        "description": "orderingapp.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "orderingapp.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "orderingapp.settings",
        "description": "orderingapp.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nimport os\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nif DEBUG:",
        "detail": "orderingapp.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "orderingapp.settings",
        "description": "orderingapp.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nimport os\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nif DEBUG:\n    # During development, serve static files from the `public/static` directory",
        "detail": "orderingapp.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "orderingapp.settings",
        "description": "orderingapp.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nimport os\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nif DEBUG:\n    # During development, serve static files from the `public/static` directory\n    STATICFILES_DIRS = [os.path.join(BASE_DIR, 'public/static')]",
        "detail": "orderingapp.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "orderingapp.settings",
        "description": "orderingapp.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nimport os\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nif DEBUG:\n    # During development, serve static files from the `public/static` directory\n    STATICFILES_DIRS = [os.path.join(BASE_DIR, 'public/static')]\nelse:",
        "detail": "orderingapp.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "orderingapp.settings",
        "description": "orderingapp.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nif DEBUG:\n    # During development, serve static files from the `public/static` directory\n    STATICFILES_DIRS = [os.path.join(BASE_DIR, 'public/static')]\nelse:\n    # In production, collect all static files into `staticfiles`\n    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Media files (Uploaded by users)\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "orderingapp.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "orderingapp.settings",
        "description": "orderingapp.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "orderingapp.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "orderingapp.settings",
        "description": "orderingapp.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "orderingapp.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "orderingapp.settings",
        "description": "orderingapp.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "orderingapp.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "orderingapp.urls",
        "description": "orderingapp.urls",
        "peekOfCode": "urlpatterns = [\n    # Admin URL\n    path('admin/', admin.site.urls),\n    # Authentication URLs\n    path('login/', views.login_page, name='login'),\n    path('register/', views.register, name='register'),\n    # Application URLs\n    path('', views.order_home, name='order'),\n    path('cart/', views.cart, name='cart'),\n    path('DashBoard/', views.dashboard, name='DashBoard'),",
        "detail": "orderingapp.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "orderingapp.wsgi",
        "description": "orderingapp.wsgi",
        "peekOfCode": "application = get_wsgi_application()\napp = application",
        "detail": "orderingapp.wsgi",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "orderingapp.wsgi",
        "description": "orderingapp.wsgi",
        "peekOfCode": "app = application",
        "detail": "orderingapp.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'orderingapp.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]